import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

# --- Parameters ---
mu = 0.1
sigma = 0.344
q = 0.01
E = 170
S0 = 170
r = 0.05
dt = 1/(365*2)
n_sims = 1000

# --- Black-Scholes put price function ---
def bs_put_price(S, K, T, r, q, sigma):
    if T <= 0:
        return max(K - S, 0)
    d1 = (np.log(S/K) + (r - q + 0.5*sigma**2)*T) / (sigma*np.sqrt(T))
    d2 = d1 - sigma*np.sqrt(T)
    return K*np.exp(-r*T)*norm.cdf(-d2) - S*np.exp(-q*T)*norm.cdf(-d1)

put_price_0 = bs_put_price(S0, E, 1, r, q, sigma)

final_S = []
simulated_payoff = []


for sim in range(n_sims):
    t = 0
    S = S0
    price_path = [S0]
    time_path = [0]
    strike = [E]

    while t < 1:
        Y = np.random.normal(0, 1)
        dS = (r - q) * S * dt + sigma * S * np.sqrt(dt) * Y
        S += dS
        t += dt
        price_path.append(S)
        time_path.append(t)
        strike.append(E)

    # --- Compute put delta along the path ---
    delta_path = []
    for i in range(len(time_path)):
        tau = 1 - time_path[i]
        if tau <= 0:
            delta_path.append(0 if price_path[i] > E else -1)
        else:
            d1 = (np.log(price_path[i]/E) + (r - q + 0.5*sigma**2)*tau) / (sigma*np.sqrt(tau))
            delta_put = np.exp(-q * tau) * (norm.cdf(d1) - 1)  # put delta
            delta_path.append(delta_put)

    # --- Initialize portfolio ---
    A_path = delta_path.copy()
    D_path = [put_price_0 - A_path[0]*S0]  # initial cash position
    Pi_path = [A_path[0]*S0 + D_path[0]]

    for i in range(1, len(time_path)):
        S_prev = price_path[i-1]
        S_curr = price_path[i]
        A_prev = A_path[i-1]
        A_curr = A_path[i]
        D_prev = D_path[i-1]

        D_new = (1 + r*dt)*D_prev - (A_curr - A_prev)*S_curr
        D_path.append(D_new)

        # Portfolio value
        Pi_new = A_curr*S_curr + D_new
        Pi_path.append(Pi_new)

    # --- Final value of hedged portfolio ---
    Pi_T = Pi_path[-1]
    payoff = max(E - price_path[-1], 0)  # actual put payoff at T

    payoff_adjusted = Pi_T
    simulated_payoff.append(payoff_adjusted)
    final_S.append(price_path[-1])

final_S = np.array(final_S)
simulated_payoff = np.array(simulated_payoff)

plt.figure(figsize=(8,6))
plt.scatter(final_S, simulated_payoff, s=10, color='black', alpha=0.5, label='Simulated hedged portfolio')
plt.plot(np.linspace(min(final_S), max(final_S), 200),
         np.maximum(E - np.linspace(min(final_S), max(final_S), 200), 0),
         'r--', lw=2, label='Put payoff')
plt.xlabel('S(T)')
plt.ylabel('Portfolio value Π(T)')
plt.title(f'Discrete Delta-Hedging Simulation (μ = {mu}, σ = {sigma})')
plt.legend()
plt.grid(True)
plt.show()
